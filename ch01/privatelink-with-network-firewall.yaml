---
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  This template creates the AWS PrivateLink networking infrastructure resources
  required to support a PrivateLink Red Hat OpenShift on AWS (ROSA) cluster.

Parameters:
  RosaClusterName:
    MinLength: 4
    MaxLength: 15
    AllowedPattern: "[a-z][-a-z0-9]*[a-z0-9]"
    Description: >
      Name of the ROSA cluster that you will create.
      That parameter is used to tag the AWS resources that this template
      creates.
    ConstraintDescription: >
      A cluster name must consist of no more than 15 lowercase alphanumeric
      characters or '-', start with a letter, and end with an alphanumeric
      character.
    Type: String
  pRosaVpcCidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.1.0.0/16
    Description: >
      Private VPC CIDR block (10.1.0.0/16 for example).
      The ROSA cluster is created in that private VPC.
      Minimum value is /25 for a Single-AZ deployment and /24 for a Multi-AZ
      deployment.
    Type: String
  pRosaVpcTgwSubnetCidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.1.1.0/24
    Description: >
      CIDR block for the private subnet connected to the transit gateway
      in the private VPC (10.1.1.0/24 for example).
    Type: String
  pRosaVpcPrivateSubnetCidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.1.0.0/24
    Description: >
      CIDR block for the private subnet that hosts the ROSA cluster
      in the private VPC (10.1.0.0/24 for example).
    Type: String
  pEgressVpcCidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.0.0/16
    Description: Egress VPC CIDR block (10.0.0.0/16 for example).
    Type: String
  pEgressVpcPrivateSubnetCidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.1.0/24
    Description: >
      CIDR block for the private subnet in the Egress VPC
      (10.0.1.0/24 for example).
    Type: String
  pEgressVpcFirewallSubnetCidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.2.0/24
    Description: >
      CIDR block for the firewall subnet in the Egress VPC
      (10.0.2.0/24 for example).
    Type: String
  pEgressVpcPublicSubnetCidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.3.0/24
    Description: >
      CIDR block for the public subnet in the Egress VPC
      (10.0.3.0/24 for example).
    Type: String

Resources:
  # ROSA Private VPC
  rRosaVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: pRosaVpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref RosaClusterName, "-private-vpc"]]
        - Key: "redhattraining:course-sku"
          Value: CS220

  # Update the default Network ACL to deny all traffic
  rInboundDefaultNetworkACLRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Fn::GetAtt:
          - rRosaVpc
          - DefaultNetworkAcl
      RuleNumber: 60
      Protocol: -1
      RuleAction: deny
      CidrBlock: 0.0.0.0/0
  rOutboundDefaultNetworkACLRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Fn::GetAtt:
          - rRosaVpc
          - DefaultNetworkAcl
      RuleNumber: 60
      Egress: true
      Protocol: -1
      RuleAction: deny
      CidrBlock: 0.0.0.0/0

  # Private subnet connected to the transit gateway in the private VPC
  rRosaVpcTgwSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: rRosaVpc
      CidrBlock:
        Ref: pRosaVpcTgwSubnetCidrBlock
      # Uses the first AZ available
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref RosaClusterName, "-private-tgw-subnet"]]
        - Key: "redhattraining:course-sku"
          Value: CS220

  # Network ACLs for the transit gateway subnet (allow all). See best practices
  # https://docs.aws.amazon.com/vpc/latest/tgw/tgw-best-design-practices.html
  rNetworkAclRosaVpcTgwSubnet:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: rRosaVpc
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref RosaClusterName, "-private-tgw-nacl"]]
        - Key: "redhattraining:course-sku"
          Value: CS220
  rNetworkAclAssociationRosaVpcTgwSubnet:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - rRosaVpcTgwSubnet
      - rNetworkAclRosaVpcTgwSubnet
    Properties:
      SubnetId:
        Ref: rRosaVpcTgwSubnet
      NetworkAclId:
        Ref: rNetworkAclRosaVpcTgwSubnet
  rInboundTgwNetworkACLRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: rNetworkAclRosaVpcTgwSubnet
      RuleNumber: 60
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
  rOutboundTgwNetworkACLRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: rNetworkAclRosaVpcTgwSubnet
      RuleNumber: 60
      Egress: true
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  # Private subnet that hosts the ROSA cluster in the private VPC
  rRosaVpcPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: rRosaVpc
      CidrBlock:
        Ref: pRosaVpcPrivateSubnetCidrBlock
      # Uses the first AZ available
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref RosaClusterName, "-private-subnet"]]
        - Key: "redhattraining:course-sku"
          Value: CS220

  # Network ACLs for the private subnet
  rNetworkAclRosaVpcPrivateSubnet:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: rRosaVpc
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref RosaClusterName, "-private-subnet-nacl"]]
        - Key: "redhattraining:course-sku"
          Value: CS220
  rNetworkAclAssociationRosaVpcPrivateSubnet:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - rRosaVpcPrivateSubnet
      - rNetworkAclRosaVpcPrivateSubnet
    Properties:
      SubnetId:
        Ref: rRosaVpcPrivateSubnet
      NetworkAclId:
        Ref: rNetworkAclRosaVpcPrivateSubnet
  # Required network ACLs (see https://access.redhat.com/documentation/en-us/
  # red_hat_openshift_service_on_aws/4/html-single/
  # install_rosa_classic_clusters/index#osd-aws-privatelink-required-resources.
  # adoc_rosa-aws-privatelink-creating-cluster)
  rInboundNetworkACLRule1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: rNetworkAclRosaVpcPrivateSubnet
      RuleNumber: 50
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 30000
        To: 60999
  rInboundNetworkACLRule2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: rNetworkAclRosaVpcPrivateSubnet
      RuleNumber: 51
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80
  rInboundNetworkACLRule3:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: rNetworkAclRosaVpcPrivateSubnet
      RuleNumber: 52
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443
  rInboundNetworkACLRule4:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: rNetworkAclRosaVpcPrivateSubnet
      RuleNumber: 53
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 6443
        To: 6443
  # Allow all outbound traffic
  rOutboundNetworkACLRule1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: rNetworkAclRosaVpcPrivateSubnet
      RuleNumber: 60
      Egress: true
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  # Egress VPC
  rEgressVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: pEgressVpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref RosaClusterName, "-egress-vpc"]]
        - Key: "redhattraining:course-sku"
          Value: CS220
  # Private subnet in the egress VPC connected to the transit gateway
  rEgressVpcTgwSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: rEgressVpc
      CidrBlock:
        Ref: pEgressVpcPrivateSubnetCidrBlock
      # Uses the first AZ available
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref RosaClusterName, "-egress-tgw-subnet"]]
        - Key: "redhattraining:course-sku"
          Value: CS220
  # Firewall subnet in the egress VPC
  rEgressVpcFirewallSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: rEgressVpc
      CidrBlock:
        Ref: pEgressVpcFirewallSubnetCidrBlock
      # Uses the first AZ available
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref RosaClusterName, "-egress-firewall-subnet"]]
        - Key: "redhattraining:course-sku"
          Value: CS220
  # Public subnet in the egress VPC
  rEgressVpcPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: rEgressVpc
      CidrBlock:
        Ref: pEgressVpcPublicSubnetCidrBlock
      # Uses the first AZ available
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref RosaClusterName, "-egress-public-subnet"]]
        - Key: "redhattraining:course-sku"
          Value: CS220
  # Internet gateway
  rInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref RosaClusterName, "-egress-igw"]]
        - Key: "redhattraining:course-sku"
          Value: CS220
  rInternetGatewayEgressAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: rEgressVpc
      InternetGatewayId:
        Ref: rInternetGateway
  # NAT gateway
  rElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref RosaClusterName, "-egress-public-nat-eip"]]
        - Key: "redhattraining:course-sku"
          Value: CS220
  rNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - rElasticIP
          - AllocationId
      SubnetId:
        Ref: rEgressVpcPublicSubnet
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref RosaClusterName, "-egress-public-nat"]]
        - Key: "redhattraining:course-sku"
          Value: CS220

  # Network Firewall
  rEgressFirewall:
    Type: AWS::NetworkFirewall::Firewall
    Properties:
      FirewallName: !Join ["", [!Ref RosaClusterName, "-firewall"]]
      VpcId: !Ref rEgressVpc
      SubnetMappings:
        - SubnetId: !Ref rEgressVpcFirewallSubnet
      DeleteProtection: false
      FirewallPolicyChangeProtection: false
      SubnetChangeProtection: false
      Tags:
        - Key: "Name"
          Value: !Join ["", [!Ref RosaClusterName, "-firewall"]]
        - Key: "redhattraining:course-sku"
          Value: CS220
      Description: Network Firewall for Egress VPC
      FirewallPolicyArn: !Ref rEgressFirewallPolicy

  rEgressFirewallPolicy:
    Type: AWS::NetworkFirewall::FirewallPolicy
    Properties:
      FirewallPolicyName: !Join ["", [!Ref RosaClusterName, "-firewall-policy"]]
      FirewallPolicy:
        StatelessDefaultActions:
          - "aws:forward_to_sfe"
        StatelessFragmentDefaultActions:
          - "aws:forward_to_sfe"
        StatefulRuleGroupReferences:
          - ResourceArn:
              Ref: "rEgressFirewallRuleGroup1"
          - ResourceArn:
              Ref: "rEgressFirewallRuleGroup2"
          - ResourceArn:
              Ref: "rEgressFirewallRuleGroup3"
      Description: Stateful rule group for Network Firewall
      Tags:
        - Key: "Name"
          Value: !Join ["", [!Ref RosaClusterName, "-firewall-policy"]]
        - Key: "redhattraining:course-sku"
          Value: CS220

  rEgressFirewallRuleGroup1:
    Type: "AWS::NetworkFirewall::RuleGroup"
    Properties:
      Capacity: "100"
      RuleGroupName: !Join ["", [!Ref RosaClusterName, "-firewall-rule-group1"]]
      Type: "STATEFUL"
      Tags:
        - Key: "Name"
          Value: !Join ["", [!Ref RosaClusterName, "-firewall-rule-group1"]]
        - Key: "redhattraining:course-sku"
          Value: CS220
      RuleGroup:
        RuleVariables:
          IPSets:
            HOME_NET:
              Definition:
                - Ref: pEgressVpcCidrBlock
                - Ref: pRosaVpcCidrBlock
        RulesSource:
          RulesSourceList:
            TargetTypes:
              - "TLS_SNI"
              - "HTTP_HOST"
            Targets:
              - "registry.redhat.io"
              - ".quay.io"
              - "sso.redhat.com"
              - "quay-registry.s3.amazonaws.com"
              - "ocm-quay-production-s3.s3.amazonaws.com"
              - "quayio-production-s3.s3.amazonaws.com"
              - "cart-rhcos-ci.s3.amazonaws.com"
              - "openshift.org"
              - "access.redhat.com"
              - "registry.access.redhat.com"
              - "registry.connect.redhat.com"
              - "pull.q1w2.quay.rhcloud.com"
              - ".q1w2.quay.rhcloud.com"
              - "www.okd.io"
              - "www.redhat.com"
              - "aws.amazon.com"
              - ".cloudfront.net"
              - "catalog.redhat.com"
              - "cert-api.access.redhat.com"
              - "api.access.redhat.com"
              - "infogw.api.openshift.com"
              - "console.redhat.com"
              - "cloud.redhat.com"
              - "observatorium-mst.api.openshift.com"
              - "observatorium.api.openshift.com"
              - ".amazonaws.com"
              - "mirror.openshift.com"
              - "storage.googleapis.com"
              - "api.openshift.com"
              - "api.pagerduty.com"
              - "events.pagerduty.com"
              - "developer.pagerduty.com"
              - "api.deadmanssnitch.com"
              - "nosnch.in"
              - "http-inputs-osdsecuritylogs.splunkcloud.com"
            GeneratedRulesType: "ALLOWLIST"

  rEgressFirewallRuleGroup2:
    Type: "AWS::NetworkFirewall::RuleGroup"
    Properties:
      Capacity: "100"
      RuleGroupName: !Join ["", [!Ref RosaClusterName, "-firewall-rule-group2"]]
      Type: "STATEFUL"
      Tags:
        - Key: "Name"
          Value: !Join ["", [!Ref RosaClusterName, "-firewall-rule-group2"]]
        - Key: "redhattraining:course-sku"
          Value: CS220
      Description: "Allow log forwarding to splunkcloud"
      RuleGroup:
        RuleVariables:
          IPSets:
            HOME_NET:
              Definition:
                - Ref: pEgressVpcCidrBlock
                - Ref: pRosaVpcCidrBlock
        RulesSource:
          RulesString: >
            pass tls $HOME_NET any -> $EXTERNAL_NET 9997 (
            msg:"Pass TLS to .osdsecuritylogs.splunkcloud.com";
            sid:1004; rev:1;)
          # The following rule does not work anymore in RHOSP 4.14
          # RulesString: >
          #   pass tls $HOME_NET any -> $EXTERNAL_NET 9997 (tls.cert_subject;
          #   dotprefix; content:".osdsecuritylogs.splunkcloud.com"; endswith;
          #   msg:"Pass TLS to .osdsecuritylogs.splunkcloud.com";
          #   sid:1004; rev:1;)

  rEgressFirewallRuleGroup3:
    Type: "AWS::NetworkFirewall::RuleGroup"
    Properties:
      Capacity: 50
      RuleGroupName: !Join ["", [!Ref RosaClusterName, "-firewall-rule-group3"]]
      Type: "STATEFUL"
      Tags:
        - Key: "Name"
          Value: !Join ["", [!Ref RosaClusterName, "-firewall-rule-group3"]]
        - Key: "redhattraining:course-sku"
          Value: CS220
      Description: "Allow access to sftp.access.redhat.com"
      RuleGroup:
        RulesSource:
          StatefulRules:
            - Action: "PASS"
              Header:
                Destination: "35.80.245.1"
                DestinationPort: "ANY"
                Direction: "ANY"
                Protocol: "SSH"
                Source:
                  Ref: pRosaVpcCidrBlock
                SourcePort: "ANY"
              RuleOptions:
                - Keyword: "sid:1"
            - Action: "PASS"
              Header:
                Destination: "35.80.245.1"
                DestinationPort: "ANY"
                Direction: "ANY"
                Protocol: "SSH"
                Source:
                  Ref: pEgressVpcCidrBlock
                SourcePort: "ANY"
              RuleOptions:
                - Keyword: "sid:2"

  # Transit gateway
  rTransitGateway:
    Type: AWS::EC2::TransitGateway
    Properties:
      AutoAcceptSharedAttachments: disable
      DnsSupport: enable
      DefaultRouteTableAssociation: disable
      DefaultRouteTablePropagation: enable
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref RosaClusterName, "-tgw"]]
        - Key: "redhattraining:course-sku"
          Value: CS220
  rRosaTransitGatewayAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds:
        - Ref: rRosaVpcTgwSubnet
      TransitGatewayId:
        Ref: rTransitGateway
      VpcId:
        Ref: rRosaVpc
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref RosaClusterName, "-tgw-private-attachment"]]
        - Key: "redhattraining:course-sku"
          Value: CS220
  rEgressTransitGatewayAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds:
        - Ref: rEgressVpcTgwSubnet
      TransitGatewayId:
        Ref: rTransitGateway
      VpcId:
        Ref: rEgressVpc
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref RosaClusterName, "-tgw-egress-attachment"]]
        - Key: "redhattraining:course-sku"
          Value: CS220

  # Transit gateway route table (Egress)
  rTransitGatewayEgressRouteTable:
    Type: AWS::EC2::TransitGatewayRouteTable
    Properties:
      TransitGatewayId:
        Ref: rTransitGateway
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref RosaClusterName, "-tgw-egress-rt"]]
        - Key: "redhattraining:course-sku"
          Value: CS220
  rEgressTransitGatewayRouteTableAssociation:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId:
        Ref: rEgressTransitGatewayAttachment
      TransitGatewayRouteTableId:
        Ref: rTransitGatewayEgressRouteTable
  rPropagateRosaVPCRoute:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId:
        Ref: rRosaTransitGatewayAttachment
      TransitGatewayRouteTableId:
        Ref: rTransitGatewayEgressRouteTable

  # Transit gateway route table (ROSA)
  rTransitGatewayRosaRouteTable:
    Type: AWS::EC2::TransitGatewayRouteTable
    Properties:
      TransitGatewayId:
        Ref: rTransitGateway
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref RosaClusterName, "-tgw-private-rt"]]
        - Key: "redhattraining:course-sku"
          Value: CS220
  rRosaTransitGatewayRouteTableAssociation:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId:
        Ref: rRosaTransitGatewayAttachment
      TransitGatewayRouteTableId:
        Ref: rTransitGatewayRosaRouteTable
  # Default route (internet) to the private subnet of the Egress VPC
  rEgressTransitGatewayRoute1:
    Type: AWS::EC2::TransitGatewayRoute
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      TransitGatewayAttachmentId:
        Ref: rEgressTransitGatewayAttachment
      TransitGatewayRouteTableId:
        Ref: rTransitGatewayRosaRouteTable
  # Route to the ROSA private VPC
  rEgressTransitGatewayRoute2:
    Type: AWS::EC2::TransitGatewayRoute
    Properties:
      DestinationCidrBlock:
        Ref: pRosaVpcCidrBlock
      TransitGatewayAttachmentId:
        Ref: rRosaTransitGatewayAttachment
      TransitGatewayRouteTableId:
        Ref: rTransitGatewayRosaRouteTable

  # Egress VPC private subnet route table
  rEgressVPCTGWRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: rEgressVpc
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref RosaClusterName, "-egress-tgw-rt"]]
        - Key: "redhattraining:course-sku"
          Value: CS220
  rEgressVPCTGWRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: rEgressVpcTgwSubnet
    Properties:
      SubnetId:
        Ref: rEgressVpcTgwSubnet
      RouteTableId:
        Ref: rEgressVPCTGWRouteTable
  # Route from the private subnet to the network firewall
  rEgressPrivateToFirewallRoute:
    Type: AWS::EC2::Route
    DependsOn: rEgressFirewall
    Properties:
      RouteTableId:
        Ref: rEgressVPCTGWRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      VpcEndpointId:
        !Select [
          1,
          !Split [":", !Select [0, !GetAtt rEgressFirewall.EndpointIds]],
        ]

  # Egress VPC firewall subnet route table
  rEgressVPCFirewallRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: rEgressVpc
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref RosaClusterName, "-egress-firewall-rt"]]
        - Key: "redhattraining:course-sku"
          Value: CS220
  rEgressVPCFirewallRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: rEgressVpcFirewallSubnet
    Properties:
      SubnetId:
        Ref: rEgressVpcFirewallSubnet
      RouteTableId:
        Ref: rEgressVPCFirewallRouteTable
  # Route from the firewall subnet to the NAT gateway
  rEgressFirewallToNatRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: rEgressVPCFirewallRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: rNATGateway
  # Route from the firewall subnet to Rosa VPC via TGW
  rEgressFirewallToTGWRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - rTransitGateway
      - rRosaTransitGatewayAttachment
      - rEgressTransitGatewayAttachment
    Properties:
      RouteTableId:
        Ref: rEgressVPCFirewallRouteTable
      DestinationCidrBlock:
        Ref: pRosaVpcCidrBlock
      TransitGatewayId:
        Ref: rTransitGateway

  # Egress VPC public subnet route table
  rEgressVpcPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: rEgressVpc
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref RosaClusterName, "-egress-public-rt"]]
        - Key: "redhattraining:course-sku"
          Value: CS220
  rEgressPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: rEgressVpcPublicSubnet
    Properties:
      SubnetId:
        Ref: rEgressVpcPublicSubnet
      RouteTableId:
        Ref: rEgressVpcPublicRouteTable
  # Default route to internet-from the public subnet to the Internet gateway
  rEgressPublicToIGWRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: rEgressVpcPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: rInternetGateway
  # Traffic to the ROSA private VPC goes through the network firewall for
  # inspection
  rEgressPublicToFirewallRoute:
    Type: AWS::EC2::Route
    DependsOn: rEgressFirewall
    Properties:
      RouteTableId:
        Ref: rEgressVpcPublicRouteTable
      DestinationCidrBlock:
        Ref: pRosaVpcCidrBlock
      VpcEndpointId:
        !Select [
          1,
          !Split [":", !Select [0, !GetAtt rEgressFirewall.EndpointIds]],
        ]

  # ROSA private VPC private subnet route table
  rRosaVpcPrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: rRosaVpc
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref RosaClusterName, "-private-rt"]]
        - Key: "redhattraining:course-sku"
          Value: CS220
  rRosaVpcPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: rRosaVpcPrivateSubnetRouteTable
    Properties:
      SubnetId:
        Ref: rRosaVpcPrivateSubnet
      RouteTableId:
        Ref: rRosaVpcPrivateSubnetRouteTable
  # Default route (internet) to the Transit gateway
  rRosaToTGWRoute:
    Type: AWS::EC2::Route
    DependsOn: rRosaTransitGatewayAttachment
    Properties:
      RouteTableId:
        Ref: rRosaVpcPrivateSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      TransitGatewayId:
        Ref: rTransitGateway

Outputs:
  oStackName:
    Description: Name of the stack
    Value:
      Ref: AWS::StackName
  oRosaClusterName:
    Description: >
      Name of the ROSA cluster to create. Use that name for the --cluster-name
      option of the "rosa create cluster" command.
    Value:
      Ref: RosaClusterName
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", RosaClusterName]]
  oRosaVpc:
    Description: ROSA private VPC
    Value:
      Ref: rRosaVpc
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", RosaVpc]]
  oRosaVpcCIDR:
    Description: >
      ROSA private VPC CIDR block. Use that CIDR block for the --machine-cidr
      option of the "rosa create cluster" command.
    Value: !GetAtt rRosaVpc.CidrBlock
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", RosaVpcCidr]]
  oRosaVpcTgwSubnet:
    Description: >
      Subnet connected to the transit gateway in the ROSA private VPC
    Value:
      Ref: rRosaVpcTgwSubnet
  oRosaVpcPrivateSubnet:
    Description: >
      Private subnet in the ROSA private VPC. Use that ID for the --subnet-ids
      option of the "rosa create cluster" command.
    Value:
      Ref: rRosaVpcPrivateSubnet
  oEgressVpc:
    Description: Egress VPC
    Value:
      Ref: rEgressVpc
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", EgressVpc]]
  oEgressVpcCIDR:
    Description: Egress VPC CIDR block
    Value: !GetAtt rEgressVpc.CidrBlock
  oEgressVpcPrivateSubnet:
    Description: Private subnet in the Egress VPC
    Value:
      Ref: rEgressVpcTgwSubnet
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", EgressVpcTgwSubnet]]
  oEgressVpcFirewallSubnet:
    Description: Firewall subnet in the Egress VPC
    Value:
      Ref: rEgressVpcFirewallSubnet
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", EgressVpcFirewallSubnet]]
  oEgressVpcPublicSubnet:
    Description: Public subnet in the Egress VPC
    Value:
      Ref: rEgressVpcPublicSubnet
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", EgressVpcPublicSubnet]]
  oEgressFirewall:
    Description: Network Firewall for Egress VPC
    Value:
      Ref: rEgressFirewall
  oEgressFirewallPolicy:
    Description: Stateful rule group for Network Firewall
    Value:
      Ref: rEgressFirewallPolicy
  oEgressFirewallRuleGroup1:
    Description: First rule group for Network Firewall
    Value:
      Ref: rEgressFirewallRuleGroup1
  oEgressFirewallRuleGroup2:
    Description: Second rule group for Network Firewall
    Value:
      Ref: rEgressFirewallRuleGroup2
  oEgressFirewallRuleGroup3:
    Description: Third rule group for Network Firewall
    Value:
      Ref: rEgressFirewallRuleGroup3
  oInternetGateway:
    Description: Internet gateway in the Egress VPC
    Value:
      Ref: rInternetGateway
  oInternetGatewayEgressAttachment:
    Description: Internet gateway attachment to the Egress VPC
    Value:
      Ref: rInternetGatewayEgressAttachment
  oNAT:
    Description: NAT gateway in the Egress VPC
    Value:
      Ref: rNATGateway
  oEIP:
    Description: Elastic IP for the NAT gateway in the Egress VPC
    Value:
      Ref: rElasticIP
  oTransitGateway:
    Description: Transit gateway that connects the two VPCs
    Value:
      Ref: rTransitGateway
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", TransitGateway]]
  oPrivateTransitGatewayAttachment:
    Description: Transit gateway attachment to the ROSA private VPC
    Value:
      Ref: rRosaTransitGatewayAttachment
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", TransitGatewayRosaAttachment]]
  oEgressTransitGatewayAttachment:
    Description: Transit gateway attachment to the Egress VPC
    Value:
      Ref: rEgressTransitGatewayAttachment
  oTransitGatewayEgressRouteTable:
    Description: Transit gateway route table for the Egress VPC
    Value:
      Ref: rTransitGatewayEgressRouteTable
  oPropagateRosaVPCRoute:
    Description: Transit gateway propagate route to the ROSA private VPC
    Value:
      Ref: rPropagateRosaVPCRoute
  oTransitGatewayRosaRouteTable:
    Description: Transit gateway route table for the ROSA private VPC
    Value:
      Ref: rTransitGatewayRosaRouteTable
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", TransitGatewayRosaRouteTable]]
  oEgressTransitGatewayRoute1:
    Description: Transit gateway route to the internet (0.0.0.0/0)
    Value:
      Ref: rEgressTransitGatewayRoute1
  oEgressTransitGatewayRoute2:
    Description: Transit gateway route to the ROSA private VPC
    Value:
      Ref: rEgressTransitGatewayRoute2
  oEgressPrivateRouteTable:
    Description: Egress VPC route table for the private subnet
    Value:
      Ref: rEgressVPCTGWRouteTable
  oEgressPrivateRouteTableAssociation:
    Description: Egress VPC route table association with the private subnet
    Value:
      Ref: rEgressVPCTGWRouteTableAssociation
  oEgressPrivateToFirewallRoute:
    Description: >
      Route from the private subnet to the network firewall
    Value:
      Ref: rEgressPrivateToFirewallRoute
  oEgressFirewallRouteTable:
    Description: >
      Route table for firewall subnet
    Value:
      Ref: rEgressVPCFirewallRouteTable
  oEgressFirewallRouteTableAssociation:
    Description: Egress VPC route table association with the firewall subnet
    Value:
      Ref: rEgressVPCFirewallRouteTableAssociation
  oEgressFirewallToNatRoute:
    Description: >
      Route from the firewall subnet to internet via NAT gateway
    Value:
      Ref: rEgressFirewallToNatRoute
  oEgressFirewallToTGWRoute:
    Description: >
      Route from the firewall subnet to the rosa VPC via TGW
    Value:
      Ref: rEgressFirewallToTGWRoute
  oEgressVpcPublicRouteTable:
    Description: Egress VPC route table for the public subnet
    Value:
      Ref: rEgressVpcPublicRouteTable
  oPublicSubnetRouteTableAssociation:
    Description: Egress VPC route table association with the public subnet
    Value:
      Ref: rEgressPublicSubnetRouteTableAssociation
  oEgressPublicToIGWRoute:
    Description: >
      Route from the public subnet to the internet (0.0.0.0/0)
      via the Internet gateway
    Value:
      Ref: rEgressPublicToIGWRoute
  oEgressPublicToFirewallRoute:
    Description: >
      Route to the ROSA private VPC from the public subnet via the
      network firewall
    Value:
      Ref: rEgressPublicToFirewallRoute
  oRosaVpcPrivateSubnetRouteTable:
    Description: Route table for the private subnet in the ROSA private VPC
    Value:
      Ref: rRosaVpcPrivateSubnetRouteTable
  oRosaVpcPrivateSubnetRouteTableAssociation:
    Description: >
      ROSA private VPC route table association with the private subnet
    Value:
      Ref: rRosaVpcPrivateSubnetRouteTableAssociation
  oPrivateToTGWRoute:
    Description: >
      Route from the ROSA private VPC to the internet (0.0.0.0/0) via the
      transit gateway
    Value:
      Ref: rRosaToTGWRoute
